from nawah.classes import ATTR as ATTR, ATTRS_TYPES as ATTRS_TYPES, ATTR_MOD as ATTR_MOD, BaseModel as BaseModel, DictObj as DictObj, EXTN as EXTN, L10N as L10N, NAWAH_DOC as NAWAH_DOC, NAWAH_ENV as NAWAH_ENV, NAWAH_MODULE as NAWAH_MODULE, NAWAH_QUERY as NAWAH_QUERY, Query as Query
from nawah.enums import Event as Event, LOCALE_STRATEGY as LOCALE_STRATEGY, NAWAH_VALUES as NAWAH_VALUES
from typing import Any, Dict, List, Literal, Tuple, Union

logger: Any

def import_modules() -> None: ...
def extract_lambda_body(lambda_func: Any): ...
def generate_ref(modules_packages: Dict[str, List[str]], modules: Dict[str, BaseModule]) -> Any: ...
def update_attr_values(attr: ATTR, value: Literal[default, extn], value_path: str, value_val: Any) -> Any: ...
async def process_file_obj(doc: NAWAH_DOC, modules: Dict[str, NAWAH_MODULE], env: NAWAH_ENV) -> Any: ...

class SignalHandler:
    time: int = ...
    @staticmethod
    def sigint_handler(signum: Any, frame: Any) -> None: ...

def process_multipart(rfile: bytes, boundary: bytes) -> Dict[bytes, List[bytes]]: ...
def extract_attr(scope: Dict[str, Any], attr_path: str) -> Any: ...
def set_attr(scope: Dict[str, Any], attr_path: str, value: Any) -> Any: ...
def expand_attr(doc: Dict[str, Any], *, expanded_doc: Dict[str, Any]=...) -> Any: ...
def deep_update(target: Union[List, Dict], new_values: Union[List, Dict]) -> Any: ...

class MissingAttrException(Exception):
    attr_name: Any = ...
    def __init__(self, attr_name: Any) -> None: ...

class InvalidAttrException(Exception):
    attr_name: Any = ...
    attr_type: Any = ...
    val_type: Any = ...
    def __init__(self, attr_name: Any, attr_type: Any, val_type: Any) -> None: ...

class ConvertAttrException(Exception):
    attr_name: Any = ...
    attr_type: Any = ...
    val_type: Any = ...
    def __init__(self, attr_name: Any, attr_type: Any, val_type: Any) -> None: ...

async def validate_doc(doc: NAWAH_DOC, attrs: Dict[str, ATTR], *, allow_update: bool=..., skip_events: List[str]=..., env: Dict[str, Any]=..., query: Union[NAWAH_QUERY, Query]=...) -> Any: ...
async def validate_dot_notated(attr: str, doc: NAWAH_DOC, attrs: Dict[str, ATTR], skip_events: List[str], env: Dict[str, Any], query: Union[NAWAH_QUERY, Query]) -> Any: ...
async def validate_default(attr_type: ATTR, attr_val: Any, skip_events: List[str], env: Dict[str, Any], query: Union[NAWAH_QUERY, Query], doc: NAWAH_DOC, scope: NAWAH_DOC, allow_none: bool) -> Any: ...
async def validate_attr(attr_name: str, attr_type: ATTR, attr_val: Any, *, allow_update: bool=..., skip_events: List[str]=..., env: Dict[str, Any]=..., query: Union[NAWAH_QUERY, Query]=..., doc: NAWAH_DOC=..., scope: NAWAH_DOC=...) -> Any: ...
def return_valid_attr(attr_val: Any, attr_oper: Literal[None, '$add', '$multiply', '$append', '$set_index', '$del_val', '$del_index'], attr_oper_args: Dict[str, Any]) -> Any: ...
def generate_dynamic_attr(dynamic_attr: Dict[str, Any]) -> Tuple[ATTR, Dict[str, Any]]: ...
def encode_attr_type(attr_type: ATTR) -> Dict[str, Any]: ...
def generate_attr(attr_type: ATTR) -> Any: ...
