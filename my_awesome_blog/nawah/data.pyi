from motor.motor_asyncio import AsyncIOMotorClient
from nawah.classes import ATTR as ATTR, ATTR_MOD as ATTR_MOD, BaseModel as BaseModel, DictObj as DictObj, EXTN as EXTN, NAWAH_DOC as NAWAH_DOC, Query as Query
from nawah.config import Config as Config
from nawah.enums import DELETE_STRATEGY as DELETE_STRATEGY, Event as Event, LOCALE_STRATEGY as LOCALE_STRATEGY
from nawah.utils import extract_attr as extract_attr, set_attr as set_attr
from types import GeneratorType as GeneratorType
from typing import Any, Dict, List

logger: Any

class UnknownDeleteStrategyException(Exception): ...
class InvalidQueryException(Exception): ...

class Data:
    @classmethod
    def create_conn(cls: Any) -> AsyncIOMotorClient: ...
    @classmethod
    async def read(cls: Any, env: Dict[str, Any], collection: str, attrs: Dict[str, ATTR], query: Query, *, skip_process: bool=..., skip_extn: bool=...) -> Dict[str, Any]: ...
    @classmethod
    async def watch(cls: Any, env: Dict[str, Any], collection: str, attrs: Dict[str, ATTR], query: Query, *, skip_extn: bool=...) -> Dict[str, Any]: ...
    @classmethod
    async def create(cls: Any, env: Dict[str, Any], collection: str, attrs: Dict[str, ATTR], doc: NAWAH_DOC) -> Dict[str, Any]: ...
    @classmethod
    async def update(cls: Any, env: Dict[str, Any], collection: str, attrs: Dict[str, ATTR], docs: List[str], doc: NAWAH_DOC) -> Dict[str, Any]: ...
    @classmethod
    async def delete(cls: Any, env: Dict[str, Any], collection: str, attrs: Dict[str, ATTR], docs: List[str], strategy: DELETE_STRATEGY) -> Dict[str, Any]: ...
    @classmethod
    async def drop(cls: Any, env: Dict[str, Any], collection: str) -> True: ...
