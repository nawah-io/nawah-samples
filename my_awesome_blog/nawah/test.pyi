from bson import ObjectId as ObjectId
from nawah.classes import ATTR as ATTR, JSONEncoder as JSONEncoder, NAWAH_DOC as NAWAH_DOC, NAWAH_QUERY as NAWAH_QUERY, Query as Query
from nawah.enums import Event as Event
from nawah.utils import extract_attr as extract_attr, validate_attr as validate_attr
from typing import Any, Dict, List, Literal, Union

logger: Any
handler: Any
formatter: Any

class InvalidTestStepException(Exception):
    msg: Any = ...
    def __init__(self, msg: str) -> None: ...

class TEST(list): ...

class STEP:
    def __init__(self, step: str, **kwargs: Dict[str, Any]) -> None: ...
    @classmethod
    def AUTH(cls: Any, var: str, val: str, hash: str) -> Any: ...
    @classmethod
    def SIGNOUT(cls): ...
    @classmethod
    def CALL(cls: Any, module: str, method: str, *, skip_events: List[str]=..., query: NAWAH_QUERY=..., doc: NAWAH_DOC=..., acceptance: Dict[str, Any]=...) -> Any: ...
    @classmethod
    def TEST(cls: Any, test: str, *, steps: List[int]=...) -> Any: ...
    @classmethod
    def SET_REALM(cls: Any, realm: str) -> Any: ...
    @classmethod
    async def validate_step(cls: Any, step: STEP) -> Any: ...

class CALC:
    def __init__(self, oper: Literal['+', '-', '*', '/', '**'], attrs: List[Any]) -> None: ...
    def execute(self, scope: Dict[str, Any]) -> Any: ...

class CAST:
    def __init__(self, type: Literal[int, float, str], attr: Any) -> None: ...
    def execute(self, scope: Dict[str, Any]) -> Any: ...

class JOIN:
    def __init__(self, separator: str, attrs: List[Any]) -> None: ...
    def execute(self, scope: Dict[str, Any]) -> Any: ...

class Test:
    session: BaseModule
    env: Dict[str, Any]
    @classmethod
    async def run_test(cls: Any, test_name: str, steps: List[STEP]=...) -> Union[None, Dict[str, Any]]: ...
    @classmethod
    async def run_call(cls: Any, results: Dict[str, Any], module: str, method: str, skip_events: List[Event], query: List[Any], doc: NAWAH_DOC, acceptance: Dict[str, Any]) -> Any: ...
    @classmethod
    def process_obj(cls: Any, results: Dict[str, Any], obj: Union[Dict[str, Any], List[Any]], call_results: DictObj=...) -> Union[Dict[str, Any], List[Any]]: ...
    @classmethod
    def break_debugger(cls: Any, scope: Dict[str, Any], call_results: Dict[str, Any]) -> None: ...
